#!/usr/bin/env node

var readline  = require('readline');
var program   = require('commander');
var config    = require('../config');
var utils     = require('../lib/utils');


var rl = readline.createInterface({
  input:  process.stdin
, output: process.stdout
});

program.version('0.1.0');

program.option('--token', 'Specifies your github personal access token');

program
  .command('create [name]')
  .description('creates a new repository')
  .option('-d, --description <description>', 'Repository description')
  .option('-h, --homepage <homepage>', 'Repository homepage')
  .option('-p, --private', 'Denotes that the repo is private')
  .action( require('./commands/create-repo') );

program
  .command('remove [org/name]')
  .description('removes a new repository')
  .action( require('./commands/remove-repo') );

program
  .command('open [issue_number]')
  .description('opens or re-opens an issue')
  .option('-o, --organization <organization>', 'Repository owner/organization')
  .option('-r, --repo <repo_name>', 'Repository name')
  .option('-t, --title <title>', 'Issue title')
  .option('-m, --title <title>', 'Issue title')
  .option('-b, --body <body>', 'Issue body')
  .option('-a, --assignee <assignee>', 'Login for the user that this issue should be assigned to')
  .option('-i, --milestone <milestone>', 'Milestone ID to associate this issue with')
  .option('-l, --labels <labels>', 'Comma separated label list', function( v ){ return v.split(','); })
  .action( require('./commands/open-issue') );

program
  .command('close <issue_number>')
  .description('closes an issue')
  .option('-o, --organization <organization>', 'Repository owner/organization')
  .option('-r, --repo <repo_name>', 'Repository name')
  .action( require('./commands/close-issue') );

program
  .command('issues [org/name]')
  .description('lists issues for org/name or current repo')
  .option('-o, --organization <organization>', 'Repository owner/organization')
  .option('-r, --repo <repo_name>', 'Repository name')
  .action( require('./commands/list-issues') );

program
  .command('issue <issue_number>')
  .description('View and edit an issue')
  .option('-o, --organization <organization>', 'Repository owner/organization')
  .option('-r, --repo <repo_name>', 'Repository name')
  .option('-t, --title <title>', 'Issue title')
  .option('-m, --title <title>', 'Issue title')
  .option('-b, --body <body>', 'Issue body')
  .option('-a, --assignee <assignee>', 'Login for the user that this issue should be assigned to')
  .option('-i, --milestone <milestone>', 'Milestone ID to associate this issue with')
  .option('-l, --labels <labels>', 'Comma separated label list', function( v ){ return v.split(','); })
  .action( require('./commands/edit-issue') );

program
  .command('pull [issue_number]')
  .description('Open a pull request optionally with attached to an issue')
  .option('-o, --organization <organization>', 'Repository owner/organization')
  .option('-r, --repo <repo_name>', 'Repository name')
  .option('-t, --title <title>', 'Issue title')
  .option('-b, --body <body>', 'Contents')
  .option('-h, --head <head>', 'Name of the branch where your changes are implemented')
  .option('-a, --base <base>', 'Name of the branch you want your changes pulled into', 'master')
  .action( require('./commands/open-pull-request') );

if ( !config.token ){
  if ( process.argv.indexOf('--token') > -1 ){
    config.token = process.argv[ process.argv.indexOf('--token') + 1 ];
  } else {
    rl.question('Name of your token: (example: NGH Macbook)', function( name ){
      config.ghauth.note = name || config.ghauth.note;

      rl.close();

      utils.ghauth( config.ghauth, function( error, auth ){
        if ( error ){
          throw error;
        }

        config.token = auth.token;
        program.parse( process.argv );
      });
    });
  }
} else {
  program.parse( process.argv );
}